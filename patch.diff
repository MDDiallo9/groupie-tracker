diff --git a/api/api.go b/api/api.go
index d7eef66..3685640 100644
--- a/api/api.go
+++ b/api/api.go
@@ -3,11 +3,12 @@ package api
 import (
 	"encoding/json"
 	"fmt"
+	"html/template"
 	"io"
 	"log"
 	"net/http"
 	"os"
-  "strconv"
+	"strconv"
 	"strings"
 )
 
@@ -25,7 +26,8 @@ type Artist struct {
 	ConcertDates     []string            // Liste de dates
 	RelationsLink    string              `json:"relations"` // sous forme d'URL
 	Relations        map[string][]string // Assemble les localisations et dates de concerts.
-  MapURL           string
+	TabCoords        []Coordinates       //Stock les coordonnées
+	CoordsJSON       template.JS
 }
 
 // Structure du json locations
@@ -111,7 +113,7 @@ func GetLocations(artist Artist) []string {
 	if err != nil {
 		fmt.Printf("%v", err)
 	}
-  return FormatLocations(locations.Locations)
+	return FormatLocations(locations.Locations)
 }
 
 func GetConcertDates(artist Artist) []string {
@@ -144,7 +146,6 @@ func GetConcertDates(artist Artist) []string {
 
 func GetRelations(artist Artist) map[string][]string {
 
-
 	// Création d'une variable relations de type RelationData pour pouvoir appeler la structure dans la fonction.
 	var relations RelationData
 
@@ -225,6 +226,7 @@ func FilterBy(artists []Artist, filter Filter) []Artist {
 
 	return results
 }
+
 // Vérifier si des artistes sont déjà présents dans la slice artists pour éviter les doublons
 func containsArtist(results []Artist, id int) bool {
 	for _, a := range results {
@@ -245,21 +247,21 @@ func normalize(s string) string {
 }
 
 func capitalize(word string) string {
-    if len(word) == 0 {
-        return word
-    }
-    return strings.ToUpper(string(word[0])) + strings.ToLower(word[1:])
+	if len(word) == 0 {
+		return word
+	}
+	return strings.ToUpper(string(word[0])) + strings.ToLower(word[1:])
 }
 
 // Pour formatter "california-usa" en "California, USA"
 func FormatLocations(locations []string) []string {
-    var formatted []string
-    for _, loc := range locations {
-        parts := strings.Split(loc, "-")
-        for i, part := range parts {
-            parts[i] = capitalize(part)
-        }
-        formatted = append(formatted, strings.Join(parts, ", "))
-    }
-    return formatted
+	var formatted []string
+	for _, loc := range locations {
+		parts := strings.Split(loc, "-")
+		for i, part := range parts {
+			parts[i] = capitalize(part)
+		}
+		formatted = append(formatted, strings.Join(parts, ", "))
+	}
+	return formatted
 }
diff --git a/api/map-api.go b/api/map-api.go
index 3d14c73..912484e 100644
--- a/api/map-api.go
+++ b/api/map-api.go
@@ -4,10 +4,7 @@ import (
 	"encoding/json"
 	"fmt"
 	"io"
-	"math"
 	"net/http"
-	"net/url"
-	"strconv"
 )
 
 type Coordinates struct {
@@ -60,6 +57,7 @@ func Geocoding(location string) (Coordinates, error) {
 	return results, nil
 }
 
+/*
 func haversine(lat1, lon1, lat2, lon2 float64) float64 {
 	const R = 6371 // Rayon terrestre en km
 	dLat := (lat2 - lat1) * math.Pi / 180
@@ -155,3 +153,4 @@ func GenerateMapUrl(locations []Coordinates) (string, error) {
 }
 
 //90bfb2c4beb645718fdc2c925fe235a1
+*/
diff --git a/server/handlers.go b/server/handlers.go
index a2c24e9..e9e05fa 100644
--- a/server/handlers.go
+++ b/server/handlers.go
@@ -1,6 +1,7 @@
 package server
 
 import (
+	"encoding/json"
 	"fmt"
 	"groupie-tracker/api" // Import pour récupérer les structures et intérargir avec les fonctions.
 	"html/template"
@@ -90,12 +91,10 @@ func home(w http.ResponseWriter, r *http.Request) {
 			CreationDate:   []int{cdMin, cdMax},
 		} // Besoin de recharger home avec le api.FilterBy(artists,filter)
 	}
-	
-	artists := api.GetArtists()
 
 	if isFilterFilled(filter) {
 		artists = api.FilterBy(artists, filter)
-		log.Println(artists,filter)
+		log.Println(artists, filter)
 	}
 
 	ts, err := template.ParseFiles("./templates/home.html", "./templates/partials/base.html", "./templates/partials/footer.html", "./templates/partials/head.html")
@@ -115,36 +114,43 @@ func home(w http.ResponseWriter, r *http.Request) {
 
 func Artist(w http.ResponseWriter, r *http.Request) {
 	idstring := r.URL.Query().Get("id")
-	id, _ := strconv.Atoi(idstring)
+	id, err := strconv.Atoi(idstring)
+	if err != nil || id < 1 || id > len(artists) {
+		http.Error(w, "Invalid artist ID", http.StatusBadRequest)
+		return
+	}
 
 	artist := artists[id-1]
-	var coords []api.Coordinates
-	for _, location := range api.GetLocations(artist) {
-		coord, err := api.Geocoding(location)
-		if err == nil {
-			coords = append(coords, coord)
-		}
-	}
-	mapURL, err := api.GenerateMapUrl(coords)
-	if err != nil {
-		fmt.Println("error when generating map url :", err)
-	}
-	artist.MapURL = mapURL
 
 	artist.Locations = api.GetLocations(artist)
 	artist.ConcertDates = api.GetConcertDates(artist)
 	artist.Relations = api.GetRelations(artist)
 
-	ts, err := template.ParseFiles("./templates/artist.html", "./templates/partials/base.html", "./templates/partials/footer.html", "./templates/partials/head.html")
+	artist.TabCoords = GenerateCoordinates(artist)
+
+	coordsJSON, err := json.Marshal(artist.TabCoords)
 	if err != nil {
-		log.Print(err.Error())
+		log.Print("Erreur JSON:", err)
 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
 		return
 	}
-  
-  	err = ts.ExecuteTemplate(w, "base.html", artist)
+	artist.CoordsJSON = template.JS(coordsJSON)
+
+	ts, err := template.ParseFiles(
+		"./templates/artist.html",
+		"./templates/partials/base.html",
+		"./templates/partials/footer.html",
+		"./templates/partials/head.html",
+	)
 	if err != nil {
-		log.Print(err.Error())
+		log.Print("Erreur template:", err)
+		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
+		return
+	}
+
+	err = ts.ExecuteTemplate(w, "base.html", artist)
+	if err != nil {
+		log.Print("Erreur exécution template:", err)
 		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
 	}
 }
@@ -226,7 +232,6 @@ func search(w http.ResponseWriter, r *http.Request) {
 func SuggestionsGeneration() []Suggestion {
 
 	var suggestions []Suggestion
-	
 
 	for _, artist := range api.GetArtists() {
 
@@ -253,16 +258,16 @@ func SuggestionsGeneration() []Suggestion {
 }
 
 func isFilterFilled(f api.Filter) bool {
-    for _, v := range f.Members {
-        if v {
-            return true
-        }
-    }
-    if f.Location != "" || f.FirstAlbumDate != 0 {
-        return true
-    }
-    if len(f.CreationDate) == 2 && (f.CreationDate[0] != 0 || f.CreationDate[1] != 2025) {
-        return true
-    }
-    return false
+	for _, v := range f.Members {
+		if v {
+			return true
+		}
+	}
+	if f.Location != "" || f.FirstAlbumDate != 0 {
+		return true
+	}
+	if len(f.CreationDate) == 2 && (f.CreationDate[0] != 0 || f.CreationDate[1] != 2025) {
+		return true
+	}
+	return false
 }
diff --git a/server/init.go b/server/init.go
index 8aafc37..87b2813 100644
--- a/server/init.go
+++ b/server/init.go
@@ -1,6 +1,7 @@
 package server
 
 import (
+	"fmt"
 	"groupie-tracker/api"
 	/* "strconv" */)
 
@@ -14,3 +15,16 @@ func InitArtists() {
 		artist.Relations = api.GetRelations(artist)
 	}
 }
+
+func GenerateCoordinates(artist api.Artist) []api.Coordinates {
+	var tabcoords []api.Coordinates
+	for _, place := range artist.Locations {
+		coords, err := api.Geocoding(place)
+		if err == nil {
+			tabcoords = append(tabcoords, coords)
+		} else {
+			fmt.Println("Couldn't complete geocoding")
+		}
+	}
+	return tabcoords
+}
diff --git a/server/server.go b/server/server.go
index c944b2f..ea0ea8d 100644
--- a/server/server.go
+++ b/server/server.go
@@ -16,7 +16,7 @@ func Routes() *http.ServeMux {
 	// mux.Handle permet de charger le CSS sur la page html.
 	mux.Handle("/static/", http.StripPrefix("/static", fileserver))
 
-  InitArtists()
+	InitArtists()
 	mux.HandleFunc("/", home)
 	mux.HandleFunc("/artist", Artist)
 	mux.HandleFunc("/search", search)
diff --git a/static/style.css b/static/style.css
index 70f9832..afedb11 100644
--- a/static/style.css
+++ b/static/style.css
@@ -299,3 +299,15 @@ form {
     padding: 0 0.5em;
   }
 }
+#map {
+  min-height: 200px;
+  min-width: 200px;
+}
+
+#marker {
+  background-image: url(https://tiles.locationiq.com/static/images/marker.png);
+  background-size: cover;
+  width: 100px;
+  height: 100px;
+  cursor: pointer;
+}
\ No newline at end of file
diff --git a/templates/artist.html b/templates/artist.html
index 7667d2f..d5455e3 100644
--- a/templates/artist.html
+++ b/templates/artist.html
@@ -49,10 +49,35 @@
                     <p>{{.}}</p>
                 {{end}}
             </p>
-            <div>
-                <img src="{{.MapURL}}" alt="Error when loading map">
+            <div id="map">
             </div>
         </div>
     </div>
 </div>
+<script>
+            
+            locationiq.key = 'pk.09b4dfb8ed80cba511a849aa0372e330';
+            //Define the map and configure the map's theme
+            var map = new maplibregl.Map({
+                container: 'map',
+                style: locationiq.getLayer("Streets"),
+                zoom: 0.1,
+            });
+            const tabCoords = JSON.parse('{{ .CoordsJSON }}');
+            console.log("Coordonnées injectées :", tabCoords);
+            tabCoords.forEach(coord => {
+                const el = document.createElement('div');
+                el.className = 'marker';
+                el.style.backgroundImage = 'url(https://tiles.locationiq.com/static/images/marker50px.png)';
+                el.style.width = '50px';
+                el.style.height = '50px';
+
+                new maplibregl.Marker(el)
+                    .setLngLat([parseFloat(coord.lon), parseFloat(coord.lat)])
+                    .setPopup(new maplibregl.Popup().setText(coord.name))
+                    .addTo(map);
+            });
+            console.log("Coordonnées injectées :", tabCoords);
+
+        </script>
 {{ end }}
diff --git a/templates/home.html b/templates/home.html
index 5bab73a..be60b09 100644
--- a/templates/home.html
+++ b/templates/home.html
@@ -1,13 +1,4 @@
 {{ define "content" }}
-  <!-- <form method="POST" action="/search">
-        <input type="text" name="search" list="suggestions" placeholder="Rechercher un groupe, un artiste, une date..." />
-        <datalist id="suggestions">
-          {{range .Suggestions}}
-            <option value="{{.Texte}}">{{.Label}}</option>
-            {{end}}
-        </datalist>
-        <button type="submit"></button>
-    </form> -->
 <main class="artists-list">
   <div class="container">
     <form action="/" method="post">
diff --git a/templates/partials/base.html b/templates/partials/base.html
index 08c8723..e62ae30 100644
--- a/templates/partials/base.html
+++ b/templates/partials/base.html
@@ -3,6 +3,11 @@
 
 <head>
     {{template "head" .}}
+    <script src='https://tiles.locationiq.com/v3/libs/maplibre-gl/1.15.2/maplibre-gl.js'></script>
+    <link href='https://tiles.locationiq.com/v3/libs/maplibre-gl/1.15.2/maplibre-gl.css' rel='stylesheet' />
+        
+    <script src='https://tiles.locationiq.com/v3/js/liq-styles-ctrl-libre-gl.js?v=0.1.8'></script>
+    <link href='https://tiles.locationiq.com/v3/css/liq-styles-ctrl-libre-gl.css?v=0.1.8' rel="stylesheet" />
 </head>
 
 <body>
